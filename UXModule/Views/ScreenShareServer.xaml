<Page x:Class="UXModule.Views.ScreenShareServer"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:UXModule.Views"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      Title="ScreenShareServer">

    <Page.Resources>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#55595c"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <ControlTemplate x:Key="RoundedButton" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Page.Resources>


    <!-- The update code is below -->

    <ScrollViewer Grid.Row="0" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" PreviewMouseWheel="OnMouseWheelScrolled">

        <!-- Create a grid to show everything within it-->
        <Grid Background = "#202124">

            <!-- Divide the grid into 2 rows of 16:1 ratio -->
            <Grid.RowDefinitions >
                <RowDefinition Height = "16*" />
                <RowDefinition/>
            </Grid.RowDefinitions >

            <!-- Create a dock panel at the bottom of the screen -->
            <DockPanel Grid.Row = "1" HorizontalAlignment = "Center" VerticalAlignment = "Stretch">

                <!-- Create a button for previous page functionality -->
                <Button Template="{DynamicResource RoundedButton}" Click = "OnPreviousPageButtonClicked" ToolTip = "Previous Page" 
        Width = "40" Height = "40" BorderThickness="0" Cursor="Hand" Background="#3C4043">
                    <!-- Style the button -->
                    <Button.Resources>
                        <Style TargetType="Border">
                            <!-- Make the button rounded-->
                            <Setter Property="CornerRadius" Value="50"/>
                            <Style.Triggers>
                                <!-- Collapse the button if the current page is 1 -->
                                <DataTrigger Binding = "{Binding CurrentPage, Mode=OneWay}" Value = "1">
                                    <Setter Property = "Visibility" Value = "Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Resources>
                    <!-- Give an icon to the button -->
                    <Image Source = "ScreenShareAssets/PreviousPageButton.png" Height="30"/>
                </Button>

                <!-- Create a Textblock to write the current page number and total number of pages -->
                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent"
           Foreground="White" Margin="20,0,20,0" FontWeight="DemiBold" FontSize="14" >
    <Run Text ="{Binding CurrentPage, Mode=OneWay}"/>
    <Run Text=" of "/>
    <Run Text="{Binding TotalPages, Mode=OneWay}"/>
    
    <!-- Collapse the textblock when total pages is 0, that is, there is no client -->
                    <TextBlock.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding = "{Binding TotalPages, Mode=OneWay}" Value = "0">
                                    <Setter Property = "Visibility" Value = "Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Resources>
                </TextBlock>

                <!-- Create a button for next page functionality -->
                <Button Template="{DynamicResource RoundedButton}" Click = "OnNextPageButtonClicked" ToolTip = "Next Page" Width = "40" 
        Height = "40" BorderThickness="0" Cursor="Hand" Background="#3C4043">
                    <!-- Style the button -->
                    <Button.Resources>
                        <Style TargetType="Border">
                            <!-- Make the button rounded-->
                            <Setter Property="CornerRadius" Value="50"/>
                            <Style.Triggers>
                                <!-- Collapse the button when on last page -->
                                <DataTrigger Binding = "{Binding IsLastPage, Mode=OneWay}" Value = "True">
                                    <Setter Property = "Visibility" Value = "Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Resources>
                    <!-- Give an image to the button -->
                    <Image Source = "ScreenShareAssets/NextPageButton.png" Height="30"/>
                </Button >
            </DockPanel >

            <!-- Popup -->
            <StackPanel Name ="Popupone" HorizontalAlignment="Right" VerticalAlignment="Bottom">
                <Popup IsOpen="{Binding IsPopupOpen, Mode=TwoWay}" PlacementTarget="{Binding ElementName=Popupone}" AllowsTransparency="True" 
       PopupAnimation="Fade" VerticalOffset="-46" StaysOpen="False">
                    <TextBox Text="{Binding PopupText, Mode=OneWay}" Background="#212024" TextAlignment="Center" Padding="20,10,20,10" BorderThickness="2.3" 
             Foreground="GhostWhite" FontFamily="Verdana" FontSize="15" Opacity="0.7">
                        <!-- Design the Textbox shape -->
                        <TextBox.Resources>
                            <Style TargetType="Border">
                                <Setter Property="CornerRadius" Value="0,30,0,30"/>
                            </Style>
                        </TextBox.Resources>
                    </TextBox>
                </Popup>
            </StackPanel>

            <!-- Create a stack panel for the screen when no client is sharing screen -->
            <StackPanel Orientation="Vertical" Grid.Row="0">

                <!-- Give an animated GIF -->
                <!-- <Image gif:AnimationBehavior.SourceUri="ScreenshareIcons/NoClient.gif" Height="300" VerticalAlignment="Center" 
       HorizontalAlignment="Center" Margin="0,200,0,20"/> -->

                <!-- Create a textblock to write a msg -->
                <TextBlock Text="No One's Here" Foreground="IndianRed" FontSize="60" FontFamily="Comic Sans MS" 
           TextWrapping="WrapWithOverflow" HorizontalAlignment="Center" />

                <!-- Make this stack panel visible only when no client is sharing their screen -->
                <StackPanel.Resources>
                    <Style TargetType="{x:Type StackPanel}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding = "{Binding CurrentWindowClients.Count, Mode=OneWay}" Value = "0">
                                <Setter Property = "Visibility" Value = "Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Resources>

            </StackPanel>

            <!-- Make a stack panel to show the tiles of clients -->
            <StackPanel Orientation="Vertical" Grid.Row="0" Margin="4,5,4,5">

                <!-- Create an ItemsControl which will show all the images in the current window client list -->
                <ItemsControl x:Name ="Items" ItemsSource="{Binding CurrentWindowClients, Mode=OneWay}">

                    <!-- This panel will be used to hold the items -->
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <!-- Give the number of rows and columns that should be there in the grid -->
                            <UniformGrid Rows="{Binding CurrentPageRows, Mode=OneWay}" Columns="{Binding CurrentPageColumns, Mode=OneWay}" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>

                    <!-- Each item will be drawn using this template -->
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Vertical">
                                <!-- Create a grid to hold the Image, caption, pin and unpin buttons -->
                                <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Width="{Binding TileWidth, Mode=OneWay}" Height="{Binding TileHeight, Mode=OneWay}" Margin="5,3,5,3">

                                    <!-- Create a border and put the image inside it -->
                                    <Border BorderThickness="2" CornerRadius="5" Background="#3C4043">
                                        <Image Source="{Binding CurrentImage, Mode=OneWay}" Stretch="Uniform"/>
                                    </Border>

                                    <!-- Create a Pin Button -->
                                    <Button Template="{DynamicResource RoundedButton}" CommandParameter="{Binding Id, Mode=OneWay}" Width="50" Height="50" Click="OnPinButtonClicked"
                            ToolTip="Pin User" BorderThickness="0" Cursor="Hand" Opacity="0.7">

                                        <!-- Assign an icon to it -->
                                        <Image Source="ScreenshareIcons/PinButton.png" Height="23" Width="23" Margin="0,3,0,0"/>

                                        <!-- This button will be shown only when mouse is hovered over the tile -->
                                        <!-- And the tile should be in unpin state -->
                                        <Button.Resources>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                                <Setter Property="Background" Value="#3C4043"/>
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Grid}},Path=IsMouseOver}" Value="True" />
                                                            <Condition Binding="{Binding Pinned,Mode=OneWay}" Value="False" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                            <!-- Make the button rounded -->
                                            <Style TargetType="Border">
                                                <Setter Property="CornerRadius" Value="50"/>
                                            </Style>
                                        </Button.Resources>
                                    </Button>

                                    <!-- Create an unpin button -->
                                    <Button Template="{DynamicResource RoundedButton}" Width="50" Height="50" Opacity="0.7" HorizontalAlignment="Center" Cursor="Hand" 
                            Click="OnUnpinButtonClicked" ToolTip="Unpin User" BorderThickness="0" CommandParameter ="{Binding Id, Mode=OneWay}">

                                        <!-- Assign an icon to the button -->
                                        <Image Source="ScreenshareIcons/UnpinButton.png" Width="25" Height="25"/>

                                        <!-- This button which will be shown only on hovering over the tile -->
                                        <!-- The tile should be in pinned state -->
                                        <Button.Resources>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                                <Setter Property="Background" Value="#3C4043"/>
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Grid}},Path=IsMouseOver}" Value="True" />
                                                            <Condition Binding="{Binding Pinned,Mode=OneWay}" Value="True" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                            <!-- Make the button rounded -->
                                            <Style TargetType="Border">
                                                <Setter Property="CornerRadius" Value="50"/>
                                            </Style>
                                        </Button.Resources>
                                    </Button>

                                    <!-- Create a textblock to show the name of the client on the bottom of the tile -->
                                    <TextBlock Text="{Binding Name, Mode=OneWay}" Foreground="AntiqueWhite" FontWeight="SemiBold" Background="Transparent" 
                               VerticalAlignment="Bottom" Margin="15,0,0,7" FontSize="12"/>

                                    <!-- Close all the open components -->
                                </Grid>
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </StackPanel>
        </Grid >

    </ScrollViewer>
</Page>
